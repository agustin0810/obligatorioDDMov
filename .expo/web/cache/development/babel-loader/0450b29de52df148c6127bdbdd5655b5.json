{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport MyText from \"../components/MyText\";\nimport MyInputText from \"../components/MyInputText\";\nimport MySingleButton from \"../components/MySingleButton\";\nimport DatabaseConnection from \"../database/database-connection\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar db = DatabaseConnection.getConnection();\n\nvar UpdateUser = function UpdateUser() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      userName = _useState2[0],\n      setUserName = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userEmail = _useState4[0],\n      setEmail = _useState4[1];\n\n  var searchUser = function searchUser() {\n    console.log(\"searchUser\");\n\n    if (userName === \"\" || !userName) {\n      Alert.alert(\"El nombre de usuario es requerido\");\n      return;\n    }\n\n    db.transaction(function (tx) {\n      tx.executeSql(\"SELECT * FROM users WHERE user_name = ?\", [userName], function (tx, results) {\n        if (results.rows.length > 0) {\n          setUserName(results.rows.item(0).user_name);\n          setEmail(results.rows.item(0).email);\n        } else {\n          Alert.alert(\"Usuario no encontrado\");\n        }\n      });\n    });\n  };\n\n  var updateUser = function updateUser() {\n    console.log(\"updateUser\");\n\n    if (!userName) {\n      Alert.alert(\"El nombre de usuario no puede estar vacio\");\n      return;\n    }\n\n    if (!userEmail) {\n      Alert.alert(\"El email no puede estar vacio\");\n      return;\n    }\n\n    db.transaction(function (tx) {\n      tx.executeSql(\"UPDATE users SET user_name = ?, email = ? WHERE user_name = ?\", [userName, userEmail, userName], function (tx, results) {\n        if (results.rows.length > 0) {\n          Alert.alert(\"Usuario actualizado\");\n        } else {\n          Alert.alert(\"No se pudo actualizar el usuario\");\n        }\n      });\n    });\n  };\n\n  return _jsx(SafeAreaView, {\n    style: styles.container,\n    children: _jsx(View, {\n      style: styles.viewContainer,\n      children: _jsx(View, {\n        style: styles.generalView,\n        children: _jsx(ScrollView, {\n          keyboardShouldPersistTaps: \"handled\",\n          children: _jsxs(KeyboardAvoidingView, {\n            behavior: \"padding\",\n            style: styles.keyboardView,\n            children: [_jsx(MyText, {\n              text: \"Buscar Usuario\"\n            }), _jsx(MyInputText, {\n              placeholder: \"Ingrese el nombre de Usuario\",\n              style: styles.inputStyle,\n              onChangeText: function onChangeText(text) {\n                return setUserName(text);\n              }\n            }), _jsx(MySingleButton, {\n              title: \"Buscar\",\n              customPress: searchUser\n            }), _jsx(MyInputText, {\n              placeholder: \"Ingrese el nombre de Usuario\",\n              value: userName,\n              onChangeText: function onChangeText(text) {\n                return setUserName(text);\n              }\n            }), _jsx(MyInputText, {\n              placeholder: \"Ingrese el Email\",\n              value: userEmail,\n              onChangeText: function onChangeText(text) {\n                return setEmail(text);\n              }\n            }), _jsx(MySingleButton, {\n              title: \"Actualizar\",\n              customPress: updateUser\n            })]\n          })\n        })\n      })\n    })\n  });\n};\n\nexport default UpdateUser;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  viewContainer: {\n    flex: 1,\n    backgroundColor: \"white\"\n  },\n  generalView: {\n    flex: 1\n  },\n  inputStyle: {\n    padding: 15\n  },\n  keyboardView: {\n    flex: 1,\n    justifyContent: \"space-between\"\n  }\n});","map":{"version":3,"sources":["/Users/sebastianbarcelona/Desktop/CTC/crud_usuarios/src/screens/UpdateUser.js"],"names":["React","useState","MyText","MyInputText","MySingleButton","DatabaseConnection","db","getConnection","UpdateUser","userName","setUserName","userEmail","setEmail","searchUser","console","log","Alert","alert","transaction","tx","executeSql","results","rows","length","item","user_name","email","updateUser","styles","container","viewContainer","generalView","keyboardView","inputStyle","text","StyleSheet","create","flex","backgroundColor","padding","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  View,\n  SafeAreaView,\n  ScrollView,\n  KeyboardAvoidingView,\n  Alert,\n} from \"react-native\";\nimport MyText from \"../components/MyText\";\nimport MyInputText from \"../components/MyInputText\";\nimport MySingleButton from \"../components/MySingleButton\";\n\nimport DatabaseConnection from \"../database/database-connection\";\nconst db = DatabaseConnection.getConnection();\n\nconst UpdateUser = () => {\n  const [userName, setUserName] = useState(\"\");\n  const [userEmail, setEmail] = useState(\"\");\n\n  const searchUser = () => {\n    console.log(\"searchUser\");\n\n    if(userName === \"\"|| !userName){\n      Alert.alert(\"El nombre de usuario es requerido\");\n      return;\n    }\n\n    db.transaction((tx) => {\n      tx.executeSql(\n        \"SELECT * FROM users WHERE user_name = ?\",\n        [userName],\n        (tx, results) => {\n          if (results.rows.length > 0) {\n            setUserName(results.rows.item(0).user_name);\n            setEmail(results.rows.item(0).email);\n          } else {\n            Alert.alert(\"Usuario no encontrado\");\n          }\n        }\n      );\n    });\n  };\n\n  const updateUser = () => {\n    console.log(\"updateUser\");\n\n    if (!userName) {\n      Alert.alert(\"El nombre de usuario no puede estar vacio\");\n      return;\n    }\n\n    if (!userEmail) {\n      Alert.alert(\"El email no puede estar vacio\");\n      return;\n    }\n\n    db.transaction((tx) => {\n      tx.executeSql(\n        \"UPDATE users SET user_name = ?, email = ? WHERE user_name = ?\",\n        [userName, userEmail, userName],\n        (tx, results) => {\n          if (results.rows.length > 0) {\n            Alert.alert(\"Usuario actualizado\");\n          } else {\n            Alert.alert(\"No se pudo actualizar el usuario\");\n          }\n        }\n      );\n    });\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.viewContainer}>\n        <View style={styles.generalView}>\n          <ScrollView keyboardShouldPersistTaps=\"handled\">\n            <KeyboardAvoidingView\n              behavior=\"padding\"\n              style={styles.keyboardView}>\n              <MyText text=\"Buscar Usuario\" />\n              <MyInputText\n                placeholder=\"Ingrese el nombre de Usuario\"\n                style={styles.inputStyle}\n                onChangeText={(text) => setUserName(text)}\n              />\n              <MySingleButton title=\"Buscar\" customPress={searchUser} />\n\n              <MyInputText\n                placeholder=\"Ingrese el nombre de Usuario\"\n                value={userName}\n                onChangeText={(text) => setUserName(text)}\n              />\n              <MyInputText \n                placeholder=\"Ingrese el Email\" \n                value={userEmail} \n                onChangeText={(text) => setEmail(text)}\n                />\n\n              <MySingleButton title=\"Actualizar\" customPress={updateUser} />\n            </KeyboardAvoidingView>\n          </ScrollView>\n        </View>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nexport default UpdateUser;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  viewContainer: {\n    flex: 1,\n    backgroundColor: \"white\",\n  },\n  generalView: {\n    flex: 1,\n  },\n  inputStyle: {\n    padding: 15,\n  },\n  keyboardView: {\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}